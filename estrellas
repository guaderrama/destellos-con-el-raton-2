<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lienzo de Partículas Interactivo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overscroll-behavior: none;
            background-color: #111827; /* bg-gray-900 */
        }
        canvas {
            display: block;
            background-color: #000;
            cursor: crosshair;
        }
        .control-panel {
            background-color: #1f2937; /* bg-gray-800 */
        }
        .slider-label {
            color: #d1d5db; /* text-gray-300 */
        }
        input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 8px;
            background: #4b5563; /* bg-gray-600 */
            border-radius: 5px;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }
        input[type="range"]:hover {
            opacity: 1;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #06b6d4; /* bg-cyan-500 */
            cursor: pointer;
            border-radius: 50%;
        }
        input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #06b6d4; /* bg-cyan-500 */
            cursor: pointer;
            border-radius: 50%;
        }
    </style>
</head>
<body class="overflow-hidden h-screen">

    <div class="flex flex-col md:flex-row h-full">
        <!-- Panel de Control -->
        <div class="control-panel w-full md:w-1/4 lg:w-1/5 p-4 flex flex-col shadow-2xl overflow-y-auto">
            <h1 class="text-2xl font-bold text-cyan-400 mb-4">Control de Partículas</h1>
            <p class="text-gray-400 mb-6 text-sm">Mueve el ratón sobre el lienzo. Ajusta los parámetros para cambiar el efecto.</p>

            <div class="space-y-6">
                <div>
                    <label for="particleCount" class="slider-label block mb-2 text-sm font-medium">Cantidad</label>
                    <input id="particleCount" type="range" min="1" max="10" value="5" class="w-full">
                </div>
                <div>
                    <label for="gravity" class="slider-label block mb-2 text-sm font-medium">Gravedad</label>
                    <input id="gravity" type="range" min="0" max="0.5" value="0.1" step="0.01" class="w-full">
                </div>
                <div>
                    <label for="lifespan" class="slider-label block mb-2 text-sm font-medium">Duración</label>
                    <input id="lifespan" type="range" min="20" max="200" value="50" class="w-full">
                </div>
                 <div>
                    <label for="trail" class="slider-label block mb-2 text-sm font-medium">Estela</label>
                    <input id="trail" type="range" min="0.01" max="0.5" value="0.1" step="0.01" class="w-full">
                </div>
            </div>
             <div class="mt-8">
                <button id="reset-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300 shadow-lg">
                    Limpiar Lienzo
                </button>
            </div>
        </div>

        <!-- Canvas -->
        <div class="w-full md:w-3/4 lg:w-4/5 h-full">
            <canvas id="particle-canvas"></canvas>
        </div>
    </div>

    <script>
        // --- CONFIGURACIÓN ---
        const canvas = document.getElementById('particle-canvas');
        const ctx = canvas.getContext('2d');
        const particleCountSlider = document.getElementById('particleCount');
        const gravitySlider = document.getElementById('gravity');
        const lifespanSlider = document.getElementById('lifespan');
        const trailSlider = document.getElementById('trail');
        const resetButton = document.getElementById('reset-btn');

        let particles = [];
        const mouse = { x: undefined, y: undefined };

        // --- CLASE PARTÍCULA ---
        // Define cómo se comporta cada partícula individual
        class Particle {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.size = Math.random() * 5 + 2; // Tamaño entre 2 y 7
                this.speedX = Math.random() * 3 - 1.5; // Velocidad horizontal aleatoria
                this.speedY = Math.random() * 3 - 1.5; // Velocidad vertical aleatoria
                this.color = `hsl(${Math.random() * 360}, 100%, 70%)`; // Color HSL aleatorio brillante
                this.lifespan = parseFloat(lifespanSlider.value);
                this.initialLifespan = this.lifespan;
            }

            // Actualiza la posición y reduce la vida
            update() {
                this.speedY += parseFloat(gravitySlider.value);
                this.x += this.speedX;
                this.y += this.speedY;
                this.lifespan -= 1;
                 if (this.size > 0.2) this.size -= 0.1;
            }

            // Dibuja la partícula en el canvas
            draw() {
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        // --- FUNCIONES PRINCIPALES ---

        // Crea nuevas partículas en la posición del ratón
        function createParticles() {
            if (mouse.x !== undefined && mouse.y !== undefined) {
                const count = parseInt(particleCountSlider.value);
                for (let i = 0; i < count; i++) {
                    particles.push(new Particle(mouse.x, mouse.y));
                }
            }
        }

        // Gestiona la actualización y el dibujo de todas las partículas
        function handleParticles() {
            for (let i = particles.length - 1; i >= 0; i--) {
                particles[i].update();
                particles[i].draw();
                // Elimina la partícula si su vida ha terminado
                if (particles[i].lifespan <= 0 || particles[i].size <= 0.2) {
                    particles.splice(i, 1);
                }
            }
        }
        
        // El bucle de animación principal
        function animate() {
            // Dibuja un rectángulo semi-transparente para crear el efecto de estela
            ctx.fillStyle = `rgba(0, 0, 0, ${trailSlider.value})`;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            createParticles();
            handleParticles();
            
            requestAnimationFrame(animate);
        }

        // Ajusta el tamaño del canvas para que ocupe todo el espacio disponible
        function resizeCanvas() {
            const rect = canvas.parentElement.getBoundingClientRect();
            canvas.width = rect.width;
            canvas.height = rect.height;
        }

        // --- EVENT LISTENERS ---
        window.addEventListener('resize', resizeCanvas);
        
        canvas.addEventListener('mousemove', (event) => {
            const rect = canvas.getBoundingClientRect();
            mouse.x = event.clientX - rect.left;
            mouse.y = event.clientY - rect.top;
        });

        canvas.addEventListener('mouseout', () => {
            mouse.x = undefined;
            mouse.y = undefined;
        });
        
        resetButton.addEventListener('click', () => {
            particles = []; // Elimina todas las partículas
            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo completamente
        });

        // --- INICIALIZACIÓN ---
        resizeCanvas();
        animate();
    </script>
</body>
</html>
